import requests
import math
import os
from openai import OpenAI
import json

# Load the OpenAI API key from environment variable
OpenAI_API_KEY = "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"

# Define the assessments
assessments = [
    {"assessment": "Definitely AI-generated", "max_score": 0},
    {"assessment": "Probably AI-generated", "max_score": 20},
    {"assessment": "Possibly AI-generated", "max_score": 50},
    {"assessment": "Probably not AI-generated", "max_score": 80},
    {"assessment": "Definitely not AI-generated", "max_score": 100},
]

def detect_text_ai(text):
    header = {
        "Content-Type": "application/json",
        "Authorization": "Bearer {0}".format(OpenAI_API_KEY),
    }
    data = {
        "prompt": text + ".\n",
        "max_tokens": 1,
        "temperature": 1,
        "top_p": 1,
        "n": 1,
        "logprobs": 5,
        "stop": "\n",
        "stream": False,
        "model": "gpt-3.5-turbo",
    }
    response = requests.post(
        "https://api.openai.com/v1/completions", headers=header, json=data
    )
    if response.status_code == 200:
        choices = response.json()["choices"][0]
        key_prob = choices["logprobs"]["top_logprobs"][0]["!"] or -10
        prob = math.exp(key_prob)
        e = 100 * (1 - (prob or 0))
        for _, item in enumerate(assessments):
            if e <= item.get("max_score"):
                label = item.get("assessment")
                break
        if label is None:
            label = assessments[-1].get("assessment")
        top_prob = {
            "Verdict": "The classifier considers the text to be {0}{1}{2} AI-generated.".format(
                "\033[1m" if prob > 0.5 else "",
                label,
                "\033[0m" if prob > 0.5 else "",
            ),
            "Probability": prob,
        }
        return top_prob
    else:
        print("Error: {0}".format(response.json()["error"]["message"].encode("utf-8")))

def detect_code_ai(code):
    header = {
        "Content-Type": "application/json",
        "Authorization": "Bearer {0}".format(OpenAI_API_KEY),
    }
    data = {
        "prompt": "python\n" + code + "\n\n",
        "max_tokens": 1,
        "temperature": 1,
        "top_p": 1,
        "n": 1,
        "logprobs": 5,
        "stop": "\n",
        "stream": False,
        "model": "gpt-3.5-turbo",
    }
    response = requests.post(
        "https://api.openai.com/v1/completions", headers=header, json=data
    )
    if response.status_code == 200:
        choices = response.json()["choices"][0]
        key_prob = choices["logprobs"]["top_logprobs"][0]["!"] or -10
        prob = math.exp(key_prob)
        e = 100 * (1 - (prob or 0))
        for _, item in enumerate(assessments):
            if e <= item.get("max_score"):
                label = item.get("assessment")
                break
        if label is None:
            label = assessments[-1].get("assessment")
        top_prob = {
            "Verdict": "The classifier considers the code to be {0}{1}{2} AI-generated.".format(
                "\033[1m" if prob > 0.5 else "",
                label,
                "\033[0m" if prob > 0.5 else "",
            ),
            "Probability": prob,
        }
        return top_prob
    else:
        print("Error: {0}".format(response.json()["error"]["message"].encode("utf-8")))

# Test the detectors
def test_detectors():
    text = "This is a sample text generated by an AI language model."
    print(detect_text_ai(text))

    code = "def hello_world():\n\tprint('Hello, world!')"
    print(detect_code_ai(code))

# Run test
test_detectors()

# Initialize OpenAI client
client = openai.OpenAI(api_key="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")

try:
    # Make OpenAI API request
    response = client.completions.create(
        prompt="Hello world",
        model="gpt-3.5-turbo-instruct"
    )
    # Handle response here
    print(response)
except openai.APIError as e:
    # Handle API error here, e.g. retry or log
    print(f"OpenAI API returned an API Error: {e}")
except openai.APIConnectionError as e:
    # Handle connection error here
    print(f"Failed to connect to OpenAI API: {e}")
except openai.RateLimitError as e:
    # Handle rate limit error (we recommend using exponential backoff)
    print(f"OpenAI API request exceeded rate limit: {e}")


